name: Vue.js Quality Check

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**/*.vue'
      - 'src/**/*.js'
      - 'package*.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**/*.vue'
      - 'src/**/*.js'
      - 'package*.json'

jobs:
  vue-analysis:
    runs-on: ubuntu-latest
    name: Vue.js 코드 품질 분석

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Vue 컴포넌트 분석
      run: |
        echo "## 🔍 Vue.js 프로젝트 분석 결과" >> analysis.md
        echo "" >> analysis.md
        
        # 컴포넌트 수 계산
        COMPONENT_COUNT=$(find src/components -name "*.vue" 2>/dev/null | wc -l)
        echo "### 📊 프로젝트 통계" >> analysis.md
        echo "- **컴포넌트 수**: $COMPONENT_COUNT 개" >> analysis.md
        
        # Vue 파일 크기 분석
        echo "- **Vue 파일 총 크기**: $(du -sh src/ | cut -f1)" >> analysis.md
        
        # 스타일 분석
        SCOPED_STYLES=$(grep -r "style scoped" src/ | wc -l)
        echo "- **Scoped 스타일 사용**: $SCOPED_STYLES 개 파일" >> analysis.md
        
        # Composition API 사용 확인
        SETUP_COUNT=$(grep -r "script setup" src/ | wc -l)
        echo "- **Composition API 사용**: $SETUP_COUNT 개 파일" >> analysis.md
        
        echo "" >> analysis.md
        echo "### 🎯 품질 체크리스트" >> analysis.md
        
        # 각 Vue 파일에 대한 체크
        for file in $(find src -name "*.vue"); do
          echo "#### $(basename $file)" >> analysis.md
          
          # Template 체크
          if grep -q "<template>" "$file"; then
            echo "- ✅ Template 구조 정상" >> analysis.md
          else
            echo "- ❌ Template 구조 누락" >> analysis.md
          fi
          
          # Script setup 체크
          if grep -q "script setup" "$file"; then
            echo "- ✅ Composition API 사용" >> analysis.md
          else
            echo "- ⚠️ Options API 사용 (Composition API 권장)" >> analysis.md
          fi
          
          # Scoped 스타일 체크
          if grep -q "style scoped" "$file"; then
            echo "- ✅ Scoped 스타일 사용" >> analysis.md
          else
            echo "- ⚠️ Scoped 스타일 미사용" >> analysis.md
          fi
          
          echo "" >> analysis.md
        done
        
        echo "### 🚀 개선 권장사항" >> analysis.md
        echo "1. **반응형 디자인**: 모든 컴포넌트에서 미디어 쿼리 확인" >> analysis.md
        echo "2. **접근성**: alt 속성, aria-label 등 접근성 요소 추가" >> analysis.md
        echo "3. **성능 최적화**: 이미지 lazy loading, 컴포넌트 분할 고려" >> analysis.md
        echo "4. **코드 일관성**: ESLint, Prettier 설정 권장" >> analysis.md

    - name: 반응형 디자인 체크
      run: |
        echo "" >> analysis.md
        echo "### 📱 반응형 디자인 분석" >> analysis.md
        
        # CSS 미디어 쿼리 사용 확인
        MEDIA_QUERIES=$(grep -r "@media" src/ | wc -l)
        echo "- **미디어 쿼리 사용**: $MEDIA_QUERIES 개" >> analysis.md
        
        # 자주 사용되는 반응형 패턴 확인
        FLEX_USAGE=$(grep -r "display: flex\|d-flex" src/ | wc -l)
        echo "- **Flexbox 사용**: $FLEX_USAGE 개" >> analysis.md
        
        GRID_USAGE=$(grep -r "display: grid\|grid-template" src/ | wc -l)
        echo "- **CSS Grid 사용**: $GRID_USAGE 개" >> analysis.md

    - name: 분석 결과 업로드
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('analysis.md')) {
            const analysis = fs.readFileSync('analysis.md', 'utf8');
            
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: analysis
              });
            }
            
            // Summary에도 추가
            await core.summary.addRaw(analysis).write();
          }

  security-check:
    runs-on: ubuntu-latest
    name: 보안 검사

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 의존성 보안 검사
      run: |
        npm audit --audit-level=moderate || echo "보안 취약점이 발견되었습니다."

    - name: 환경변수 노출 검사
      run: |
        echo "## 🔒 보안 검사 결과" >> security.md
        echo "" >> security.md
        
        # API 키 노출 검사
        if grep -r "api.key\|apikey\|secret\|password" src/ --exclude-dir=node_modules; then
          echo "⚠️ **주의**: 하드코딩된 API 키나 비밀정보가 발견될 수 있습니다." >> security.md
          echo "환경변수(.env) 사용을 권장합니다." >> security.md
        else
          echo "✅ 하드코딩된 민감정보 없음" >> security.md
        fi
        
        echo "" >> security.md
        echo "### 보안 권장사항" >> security.md
        echo "- 카카오맵 API 키는 환경변수로 관리" >> security.md
        echo "- .env 파일은 .gitignore에 포함" >> security.md
        echo "- 정기적인 의존성 업데이트" >> security.md

    - name: 보안 결과 업로드
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('security.md')) {
            const security = fs.readFileSync('security.md', 'utf8');
            await core.summary.addRaw(security).write();
          }
