name: Auto Label

on:
  pull_request:
    types: [opened, edited, synchronize]
  issues:
    types: [opened, edited]

jobs:
  auto-label:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Auto Label Based on Files
      uses: actions/github-script@v7
      with:
        script: |
          const { context, github } = require('@actions/github');
          
          // PR인 경우 변경된 파일 확인
          if (context.eventName === 'pull_request') {
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            
            const labels = [];
            
            // 컴포넌트별 라벨
            files.forEach(file => {
              if (file.filename.includes('Header.vue')) labels.push('component:header');
              if (file.filename.includes('Home.vue')) labels.push('component:home');
              if (file.filename.includes('Features.vue')) labels.push('component:features');
              if (file.filename.includes('Contact.vue')) labels.push('component:contact');
              if (file.filename.includes('Footer.vue')) labels.push('component:footer');
              
              // 파일 타입별 라벨
              if (file.filename.endsWith('.vue')) labels.push('vue-component');
              if (file.filename.endsWith('.css')) labels.push('styling');
              if (file.filename.includes('router')) labels.push('routing');
              if (file.filename.includes('.md')) labels.push('documentation');
            });
            
            // 변경 사이즈별 라벨
            const totalChanges = files.reduce((sum, file) => sum + file.changes, 0);
            if (totalChanges < 10) labels.push('size:small');
            else if (totalChanges < 100) labels.push('size:medium');
            else labels.push('size:large');
            
            // 라벨 적용
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: [...new Set(labels)] // 중복 제거
              });
            }
          }
          
          // 이슈 제목 기반 자동 라벨링
          if (context.eventName === 'issues') {
            const title = context.payload.issue.title.toLowerCase();
            const labels = [];
            
            if (title.includes('bug') || title.includes('버그')) labels.push('bug');
            if (title.includes('feature') || title.includes('기능')) labels.push('enhancement');
            if (title.includes('docs') || title.includes('문서')) labels.push('documentation');
            if (title.includes('mobile') || title.includes('모바일')) labels.push('mobile');
            if (title.includes('responsive') || title.includes('반응형')) labels.push('responsive');
            if (title.includes('performance') || title.includes('성능')) labels.push('performance');
            if (title.includes('accessibility') || title.includes('접근성')) labels.push('accessibility');
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                labels: labels
              });
            }
          }
